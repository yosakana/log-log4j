#   第一个是日志的级别 后面的所有都是 {appenderName}
log4j.rootLogger=trace,console,file
#配置appender输出方式
#log4j.appender.{appenderName} (自己定义的名字) <- 通过这个来加一个appender
log4j.appender.console=org.apache.log4j.ConsoleAppender
#配置简单输出格式
#log4j.appender.console.layout=org.apache.log4j.SimpleLayout
#以html的形式输出
#log4j.appender.console.layout=org.apache.log4j.HTMLLayout
#配置自定义格式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.conversionPattern=[%p]%r %c%t%d{yyyy-MM-dd HH:mm:ss:SSS} %m%n

#                %m 输出代码中指定的日志信息
#                %p 输出优先级，及 DEBUG、INFO 等
#                %n 换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）
#                %r 输出自应用启动到输出该 log 信息耗费的毫秒数
#                %c 输出打印语句所属的类的全名
#                %t 输出产生该日志的线程全名
#                %d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日 HH:mm:ss}
#                %l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)
#                %F 输出日志消息产生时所在的文件名称
#                %L 输出代码中的行号
#                %% 输出一个 "%" 字符
#                [%p]%r %c%t%d{yyyy-MM-dd HH:mm:ss:SSS} %m%n
#                可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式
#                [%10p]：[]中必须有10个字符，由空格来进行补齐，信息右对齐
#                [%-10p]：[]中必须有10个字符，由空格来进行补齐，信息左对齐，应用较广泛

#指定以文件的输出方式
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.conversionPattern=[%p]%r %c%t%d{yyyy-MM-dd HH:mm:ss:SSS} %m%n
#指定输出文件的绝对路径 （properties文件中不需要加上""）
log4j.appender.file.file=E://log//myLog.log
log4j.appender.file.encoding=UTF-8
